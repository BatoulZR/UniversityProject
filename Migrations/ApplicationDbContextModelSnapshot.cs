// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SeniorProject.Data;

namespace SeniorProject.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("SeniorProject.Data.AppUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<bool>("AdminConfirmation")
                        .HasColumnType("bit");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("firstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("lastName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("SeniorProject.Models.Accident", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Damages")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("date");

                    b.Property<int>("LabDayId")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<TimeSpan>("Time")
                        .HasColumnType("time");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("LabDayId");

                    b.HasIndex("UserId");

                    b.ToTable("Accident");
                });

            modelBuilder.Entity("SeniorProject.Models.Assesment", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("LabDayId")
                        .HasColumnType("int");

                    b.Property<int>("TraineeId")
                        .HasColumnType("int");

                    b.Property<int>("attitude")
                        .HasColumnType("int");

                    b.Property<int>("communication")
                        .HasColumnType("int");

                    b.Property<DateTime>("date")
                        .HasColumnType("date");

                    b.Property<int>("leadership")
                        .HasColumnType("int");

                    b.Property<int>("professionalism")
                        .HasColumnType("int");

                    b.Property<int>("quality")
                        .HasColumnType("int");

                    b.Property<int>("quantity")
                        .HasColumnType("int");

                    b.Property<int>("studentId")
                        .HasColumnType("int");

                    b.Property<int>("work_habits")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("LabDayId");

                    b.HasIndex("TraineeId");

                    b.HasIndex("studentId");

                    b.ToTable("Assesment");
                });

            modelBuilder.Entity("SeniorProject.Models.Attendance", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<TimeSpan?>("ArrivalTime")
                        .HasColumnType("time");

                    b.Property<int>("LabDayId")
                        .HasColumnType("int");

                    b.Property<TimeSpan?>("LeavingTime")
                        .HasColumnType("time");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("LabDayId");

                    b.HasIndex("UserId");

                    b.ToTable("Attendance");
                });

            modelBuilder.Entity("SeniorProject.Models.Bacteria", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BacteriaName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("boxID")
                        .HasColumnType("int");

                    b.Property<int>("x")
                        .HasColumnType("int");

                    b.Property<int>("y")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("boxID");

                    b.ToTable("Bacteria");
                });

            modelBuilder.Entity("SeniorProject.Models.Biowaste", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Boxnum")
                        .HasColumnType("int");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<int>("ExperimentId")
                        .HasColumnType("int");

                    b.Property<DateTime>("date")
                        .HasColumnType("datetime2");

                    b.Property<int>("weight")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("CompanyId");

                    b.HasIndex("ExperimentId");

                    b.ToTable("Biowaste");
                });

            modelBuilder.Entity("SeniorProject.Models.Box", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Box_Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Box");
                });

            modelBuilder.Entity("SeniorProject.Models.Collaboration", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AppUserId")
                        .HasColumnType("int");

                    b.Property<string>("ColabboratorName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Compounds")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Institute")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LabDayId")
                        .HasColumnType("int");

                    b.Property<string>("Position")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Test")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("phdM2")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("AppUserId");

                    b.HasIndex("LabDayId");

                    b.ToTable("Collaboration");
                });

            modelBuilder.Entity("SeniorProject.Models.Company", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Fax")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("num")
                        .HasColumnType("bigint");

                    b.HasKey("ID");

                    b.ToTable("Company");
                });

            modelBuilder.Entity("SeniorProject.Models.Experiment", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Desc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LabDayId")
                        .HasColumnType("int");

                    b.Property<string>("Superv")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("projectId")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("LabDayId");

                    b.HasIndex("UserId");

                    b.HasIndex("projectId");

                    b.ToTable("Experiment");
                });

            modelBuilder.Entity("SeniorProject.Models.Form", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AppUserId")
                        .HasColumnType("int");

                    b.Property<int?>("LabDayId")
                        .HasColumnType("int");

                    b.Property<string>("Paragraph")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StudentID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("date")
                        .HasColumnType("datetime2");

                    b.Property<string>("duration")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("fathername")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("firstname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("lastname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("place")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("requestStatus")
                        .HasColumnType("bit");

                    b.Property<string>("requestType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("speciality")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("year")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("AppUserId");

                    b.HasIndex("LabDayId");

                    b.ToTable("Form");
                });

            modelBuilder.Entity("SeniorProject.Models.Freezer", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BoxName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BoxType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Cons")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LevSide")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LevelNum")
                        .HasColumnType("int");

                    b.Property<string>("Side")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("temperature")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Freezer");
                });

            modelBuilder.Entity("SeniorProject.Models.Item", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Capacity")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CompanyId")
                        .HasColumnType("int");

                    b.Property<int?>("ExId")
                        .HasColumnType("int");

                    b.Property<DateTime>("arrivalDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("calibration")
                        .HasColumnType("bit");

                    b.Property<bool?>("expired")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("expiryDate")
                        .HasColumnType("date");

                    b.Property<TimeSpan?>("from")
                        .HasColumnType("time");

                    b.Property<bool?>("inUse")
                        .HasColumnType("bit");

                    b.Property<string>("lotNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("price")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("quantity")
                        .HasColumnType("int");

                    b.Property<int?>("quantityUsed")
                        .HasColumnType("int");

                    b.Property<bool?>("remainingQuantity")
                        .HasColumnType("bit");

                    b.Property<string>("room")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("serialNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<TimeSpan?>("to")
                        .HasColumnType("time");

                    b.Property<string>("type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("units")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("weight")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("CompanyId");

                    b.HasIndex("ExId");

                    b.ToTable("Item");
                });

            modelBuilder.Entity("SeniorProject.Models.LabDay", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<TimeSpan?>("closingTime")
                        .HasColumnType("time");

                    b.Property<DateTime>("date")
                        .HasColumnType("date");

                    b.Property<TimeSpan>("openingTime")
                        .HasColumnType("time");

                    b.HasKey("ID");

                    b.ToTable("LabDay");
                });

            modelBuilder.Entity("SeniorProject.Models.MeetingPresence", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("mrrId")
                        .HasColumnType("int");

                    b.Property<string>("name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("UserId");

                    b.HasIndex("mrrId");

                    b.ToTable("MeetingPresence");
                });

            modelBuilder.Entity("SeniorProject.Models.MeetingRoomReservation", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AppUserId")
                        .HasColumnType("int");

                    b.Property<int>("LabDayId")
                        .HasColumnType("int");

                    b.Property<DateTime>("date")
                        .HasColumnType("datetime2");

                    b.Property<string>("objective")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("summary")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("time1")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("time2")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.HasIndex("AppUserId");

                    b.HasIndex("LabDayId");

                    b.ToTable("MeetingRoomReservation");
                });

            modelBuilder.Entity("SeniorProject.Models.Order", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("LabDayId")
                        .HasColumnType("int");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("companyID")
                        .HasColumnType("int");

                    b.Property<bool?>("confirmed")
                        .HasColumnType("bit");

                    b.Property<DateTime>("dateOfOrder")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("dateOfUsage")
                        .HasColumnType("datetime2");

                    b.Property<string>("productName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("projectId")
                        .HasColumnType("int");

                    b.Property<int>("quantity")
                        .HasColumnType("int");

                    b.Property<string>("specifityNotes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("supervisorName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("LabDayId");

                    b.HasIndex("UserId");

                    b.HasIndex("companyID");

                    b.HasIndex("projectId");

                    b.ToTable("Order");
                });

            modelBuilder.Entity("SeniorProject.Models.Permission", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AppUserId")
                        .HasColumnType("int");

                    b.Property<string>("BorrowedObject")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Colored")
                        .HasColumnType("bit");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int?>("LabDayId")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PagesNumber")
                        .HasColumnType("int");

                    b.Property<DateTime>("ReturnDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Returned")
                        .HasColumnType("bit");

                    b.Property<string>("Work")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("confirmation")
                        .HasColumnType("bit");

                    b.Property<string>("email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("phoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("position")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("project")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("supervised")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("university")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("AppUserId");

                    b.HasIndex("LabDayId");

                    b.ToTable("Permission");
                });

            modelBuilder.Entity("SeniorProject.Models.Project", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AppUserId")
                        .HasColumnType("int");

                    b.Property<int?>("LabDayId")
                        .HasColumnType("int");

                    b.Property<bool?>("collaborationOrNot")
                        .HasColumnType("bit");

                    b.Property<bool>("congress")
                        .HasColumnType("bit");

                    b.Property<bool>("consumables")
                        .HasColumnType("bit");

                    b.Property<bool>("fieldFees")
                        .HasColumnType("bit");

                    b.Property<DateTime>("from")
                        .HasColumnType("datetime2");

                    b.Property<string>("fundAmount")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("fundingDuration")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("fundingorganism")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("machinesAndEquipements")
                        .HasColumnType("bit");

                    b.Property<string>("others")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("publicationAndPatentFees")
                        .HasColumnType("bit");

                    b.Property<bool>("reasearchAssistantFees")
                        .HasColumnType("bit");

                    b.Property<string>("title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("to")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.HasIndex("AppUserId");

                    b.HasIndex("LabDayId");

                    b.ToTable("Project");
                });

            modelBuilder.Entity("SeniorProject.Models.ProjectCollaboration", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("collaborationId")
                        .HasColumnType("int");

                    b.Property<int>("projectId")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("collaborationId");

                    b.HasIndex("projectId");

                    b.ToTable("ProjectCollaboration");
                });

            modelBuilder.Entity("SeniorProject.Models.ProjectResearcher", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("projectId")
                        .HasColumnType("int");

                    b.Property<int>("researcherId")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("projectId");

                    b.HasIndex("researcherId");

                    b.ToTable("ProjectResearcher");
                });

            modelBuilder.Entity("SeniorProject.Models.Researcher", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("reseacherName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("tasks")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Researcher");
                });

            modelBuilder.Entity("SeniorProject.Models.Rotation", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("LabDayId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("cafeteriaFees")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("entrancePermission")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("eventsAndCeremonies")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("inventory")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("month")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("orderingConsumables")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("photosAndDemandLetter")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("stockUpdates")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("year")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("LabDayId");

                    b.HasIndex("UserId");

                    b.ToTable("Rotation");
                });

            modelBuilder.Entity("SeniorProject.Models.TestingAndCalibration", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.Property<int>("LabDayId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("date")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("nextCheck")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.HasIndex("ItemId");

                    b.HasIndex("LabDayId");

                    b.HasIndex("UserId");

                    b.ToTable("TestingAndCalibration");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("SeniorProject.Data.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("SeniorProject.Data.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SeniorProject.Data.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("SeniorProject.Data.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SeniorProject.Models.Accident", b =>
                {
                    b.HasOne("SeniorProject.Models.LabDay", "LabDay")
                        .WithMany("Accidents")
                        .HasForeignKey("LabDayId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SeniorProject.Data.AppUser", "User")
                        .WithMany("Accidents")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("SeniorProject.Models.Assesment", b =>
                {
                    b.HasOne("SeniorProject.Models.LabDay", "LabDay")
                        .WithMany("Assesments")
                        .HasForeignKey("LabDayId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SeniorProject.Data.AppUser", "Trainee")
                        .WithMany("AssesmentTrainees")
                        .HasForeignKey("TraineeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SeniorProject.Data.AppUser", "Student")
                        .WithMany("AssesmentStudents")
                        .HasForeignKey("studentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("SeniorProject.Models.Attendance", b =>
                {
                    b.HasOne("SeniorProject.Models.LabDay", "LabDay")
                        .WithMany("Attendances")
                        .HasForeignKey("LabDayId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SeniorProject.Data.AppUser", "User")
                        .WithMany("Attendances")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("SeniorProject.Models.Bacteria", b =>
                {
                    b.HasOne("SeniorProject.Models.Box", "box")
                        .WithMany("Bacterias")
                        .HasForeignKey("boxID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("SeniorProject.Models.Biowaste", b =>
                {
                    b.HasOne("SeniorProject.Models.Company", "Company")
                        .WithMany("Biowastes")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SeniorProject.Models.Experiment", "Experiment")
                        .WithMany("Biowastes")
                        .HasForeignKey("ExperimentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("SeniorProject.Models.Collaboration", b =>
                {
                    b.HasOne("SeniorProject.Data.AppUser", null)
                        .WithMany("Collaborations")
                        .HasForeignKey("AppUserId");

                    b.HasOne("SeniorProject.Models.LabDay", "LabDay")
                        .WithMany("Collaborations")
                        .HasForeignKey("LabDayId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("SeniorProject.Models.Experiment", b =>
                {
                    b.HasOne("SeniorProject.Models.LabDay", "LabDay")
                        .WithMany("Experiments")
                        .HasForeignKey("LabDayId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SeniorProject.Data.AppUser", "User")
                        .WithMany("Experiments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SeniorProject.Models.Project", "project")
                        .WithMany("Experiments")
                        .HasForeignKey("projectId");
                });

            modelBuilder.Entity("SeniorProject.Models.Form", b =>
                {
                    b.HasOne("SeniorProject.Data.AppUser", null)
                        .WithMany("Forms")
                        .HasForeignKey("AppUserId");

                    b.HasOne("SeniorProject.Models.LabDay", "LabDay")
                        .WithMany("Forms")
                        .HasForeignKey("LabDayId");
                });

            modelBuilder.Entity("SeniorProject.Models.Item", b =>
                {
                    b.HasOne("SeniorProject.Models.Company", "company")
                        .WithMany("Items")
                        .HasForeignKey("CompanyId");

                    b.HasOne("SeniorProject.Models.Experiment", "Experiment")
                        .WithMany("Items")
                        .HasForeignKey("ExId");
                });

            modelBuilder.Entity("SeniorProject.Models.MeetingPresence", b =>
                {
                    b.HasOne("SeniorProject.Data.AppUser", "User")
                        .WithMany("MeetingPresences")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SeniorProject.Models.MeetingRoomReservation", "meetingRR")
                        .WithMany("presences")
                        .HasForeignKey("mrrId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("SeniorProject.Models.MeetingRoomReservation", b =>
                {
                    b.HasOne("SeniorProject.Data.AppUser", null)
                        .WithMany("MeetingRoomReservations")
                        .HasForeignKey("AppUserId");

                    b.HasOne("SeniorProject.Models.LabDay", "LabDay")
                        .WithMany("MeetingRoomReservations")
                        .HasForeignKey("LabDayId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("SeniorProject.Models.Order", b =>
                {
                    b.HasOne("SeniorProject.Models.LabDay", "LabDay")
                        .WithMany("Orders")
                        .HasForeignKey("LabDayId");

                    b.HasOne("SeniorProject.Data.AppUser", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId");

                    b.HasOne("SeniorProject.Models.Company", "company")
                        .WithMany("Orders")
                        .HasForeignKey("companyID");

                    b.HasOne("SeniorProject.Models.Project", "project")
                        .WithMany("Orders")
                        .HasForeignKey("projectId");
                });

            modelBuilder.Entity("SeniorProject.Models.Permission", b =>
                {
                    b.HasOne("SeniorProject.Data.AppUser", null)
                        .WithMany("Permissions")
                        .HasForeignKey("AppUserId");

                    b.HasOne("SeniorProject.Models.LabDay", "LabDay")
                        .WithMany("Permissions")
                        .HasForeignKey("LabDayId");
                });

            modelBuilder.Entity("SeniorProject.Models.Project", b =>
                {
                    b.HasOne("SeniorProject.Data.AppUser", null)
                        .WithMany("Projects")
                        .HasForeignKey("AppUserId");

                    b.HasOne("SeniorProject.Models.LabDay", "LabDay")
                        .WithMany("Projects")
                        .HasForeignKey("LabDayId");
                });

            modelBuilder.Entity("SeniorProject.Models.ProjectCollaboration", b =>
                {
                    b.HasOne("SeniorProject.Models.Collaboration", "Collaboration")
                        .WithMany("ProjectCollaborations")
                        .HasForeignKey("collaborationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SeniorProject.Models.Project", "Project")
                        .WithMany("ProjectCollaborations")
                        .HasForeignKey("projectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("SeniorProject.Models.ProjectResearcher", b =>
                {
                    b.HasOne("SeniorProject.Models.Project", "Project")
                        .WithMany("ProjectResearchers")
                        .HasForeignKey("projectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SeniorProject.Models.Researcher", "Researcher")
                        .WithMany("ProjectResearchers")
                        .HasForeignKey("researcherId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("SeniorProject.Models.Rotation", b =>
                {
                    b.HasOne("SeniorProject.Models.LabDay", "LabDay")
                        .WithMany()
                        .HasForeignKey("LabDayId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SeniorProject.Data.AppUser", "User")
                        .WithMany("Rotations")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("SeniorProject.Models.TestingAndCalibration", b =>
                {
                    b.HasOne("SeniorProject.Models.Item", "item")
                        .WithMany()
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SeniorProject.Models.LabDay", "LabDay")
                        .WithMany("TestingAndCalibrations")
                        .HasForeignKey("LabDayId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SeniorProject.Data.AppUser", "User")
                        .WithMany("TestingAndCalibrations")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
